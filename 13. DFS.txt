Represent a given graph using adjacency matrix/list to perform DFS and using adjacency
list to perform BFS. Use the map of the area around the college as the graph. Identify the
prominent land marks as nodes and perform DFS and BFS on that.


#include <iostream>
#include <stdlib.h>
using namespace std;
int cost[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];
int main()
{
 int m;
 cout << "Enter number of vertices : ";
 cin >> n;
 cout << "Enter number of edges : ";
 cin >> m;

 cout << "\nEDGES :\n";
 for (k = 1; k <= m; k++)
 {
 cin >> i >> j;
 cost[i][j] = 1;
 cost[j][i] = 1;
 }
 cout << "The adjacency matrix of the graph is : " << endl;
 for (i = 0; i < n; i++)
 {
 for (j = 0; j < n; j++)
 {
 cout << " " << cost[i][j];
 }
 cout << endl;
 }

 cout << "Enter initial vertex : ";
 cin >> v;
 cout << "The BFS of the Graph is\n";
 cout << v<<endl;
 visited[v] = 1;
 k = 1;
 while (k < n)
 {
 for (j = 1; j <= n; j++)
 if (cost[v][j] != 0 && visited[j] != 1 && visit[j] != 1)
 {
 visit[j] = 1;
 qu[rear++] = j;
 }
 v = qu[front++];
 cout << v << " ";
 k++;
 visit[v] = 0;
 visited[v] = 1;
 }

 cout <<endl<<"Enter initial vertex : ";
 cin >> v;
 cout << "The DFS of the Graph is\n";
 cout << v<<endl;
 visited[v] = 1;
 k = 1;
 while (k < n)
 {
 for (j = n; j >= 1; j--)
 if (cost[v][j] != 0 && visited1[j] != 1 && visit1[j] != 1)
 {
 visit1[j] = 1;
 stk[top] = j;
 top++;
 }
 v = stk[--top];
 cout << v << " ";
 k++;
 visit1[v] = 0;
 visited1[v] = 1;
 }
 return 0;
}




Represent a given graph using adjacency matrix/list to perform DFS and using
adjacency list to perform BFS. Use the map of the area around the college as the graph.
Objectives:
1. To understand directed and undirected graph.
2. To implement program to represent graph using adjacency matrix and list.
3. To perform DFS, BFS operations on Graph
Software Requirements g++ / gcc compiler- / 64 bit Fedora, eclipse IDE
Input : Values representing nodes and links between these nodes for a given graph
Output: Adjacency matrix and list representation of given graph and traversal paths using BFS and DFS
Theory:
Graph is a data structure that consists of following two components:
1. A finite set of vertices also called as nodes.
2. A finite set of ordered pair of the form (u, v) called as edge.
The pair is ordered because (u, v) is not same as (v, u) in case of directed graph(di-graph). The pair of
form (u, v) indicates that there is an edge from vertex u to vertex v. The edges may contain
weight/value/cost.
Graphs are used to represent many real life applications: Graphs are used to represent networks. The
networks may include paths in a city or telephone network or circuit network. Graphs are also used in
social networks like linkedIn, facebook. For example, in facebook, each person is represented with a
vertex(or node). Each node is a structure and contains information like person id, name, gender and
locale. See this for more applications of graph.
Following is an example undirected graph with 5 vertices.
Following two are the most commonly used representations of graph.
1. Adjacency Matrix 2. Adjacency List
Adjacency Matrix:
Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph. Let
the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j.
Adjacency matrix for undirected graph is always symmetric. Adjacency Matrix is also used to
represent weighted graphs. If adj[i][j] = w, then there is an edge from vertex i to vertex j with
weight w.
The adjacency matrix for the above example graph is:
Adjacency Matrix Representation
Adjacency List:
An array of linked lists is used. Size of the array is equal to number of vertices. Let the array be
array[]. An entry array[i] represents the linked list of vertices adjacent to the ith vertex. This
representation can also be used to represent a weighted graph. The weights of edges can be
stored in nodes of linked lists. Following is adjacency list representation of the above graph.
Graph Traversals:
Breadth First Search (BFS) is a fundamental graph traversal algorithm. It involves visiting all the
connected nodes of a graph in a level-by-level manner.
Algorithm:
1. Initialization: Enqueue the starting node into a queue and mark it as visited.
2. Exploration: While the queue is not empty:
• Dequeue a node from the queue and visit it (e.g., print its value).
• For each unvisited neighbor of the dequeued node:
• Enqueue the neighbor into the queue.
• Mark the neighbor as visited.
3. Termination: Repeat step 2 until the queue is empty.
Pseudocode:
create a queue Q
mark v as visited and put v into Q
while Q is non-empty
 remove the head u of Q
 mark and enqueue all (unvisited) neighbours of u
Depth first Search or Depth first traversal is a recursive algorithm for searching all the vertices of a
graph or tree data structure. Traversal means visiting all the nodes of a graph.
Algorithm:
1. Start by putting any one of the graph's vertices on top of a stack.
2. Take the top item of the stack and add it to the visited list.
3. Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the
top of the stack.
4. Keep repeating steps 2 and 3 until the stack is empty.
Pseudocode:
DFS(G, u)
 u.visited = true
 for each v ∈ G.Adj[u]
 if v.visited == false
 DFS(G,v)

init() {
 For each u ∈ G
 u.visited = false
 For each u ∈ G
 DFS(G, u)
}
Conclusion: Implemented program for graph presentation in adjacency matrix and list and graph
traversing techniques