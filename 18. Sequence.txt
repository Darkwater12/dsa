Given sequence k = k1 <k2 < … <kn of n sorted keys, with a search probability pi for each
key ki . Build the Binary search tree that has the least search cost given the access
probability for each key? 


#include<iostream>
using namespace std;
void con_obst(void);
void print(int,int);
float a[20],b[20],wt[20][20],c[20][20];
int r[20][20],n;
int main()
{
int i;
cout<<"\n****** PROGRAM FOR OBST ******\n";
cout<<"\nEnter the no. of nodes : ";
cin>>n;cout<<"\nEnter the probability for successful search :: ";
for(i=1;i<=n;i++)
{
cout<<"p["<<i<<"]";
cin>>a[i];
}
cout<<"\nEnter the probability for unsuccessful search :: ";
for(i=0;i<=n;i++)
{
cout<<"q["<<i<<"]";
cin>>b[i];
}
con_obst();
print(0,n);
cout<<endl;
}
void con_obst(void)
{
int i,j,k,l,min;
for(i=0;i<n;i++)
{ //Initialisation
c[i][i]=0.0;
r[i][i]=0;
wt[i][i]=b[i];
// for j-i=1 can be j=i+1
wt[i][i+1]=b[i]+b[i+1]+a[i+1];
c[i][i+1]=b[i]+b[i+1]+a[i+1];
r[i][i+1]=i+1;
}
c[n][n]=0.0;
r[n][n]=0;
wt[n][n]=b[n];
//for j-i=2,3,4....,n
for(i=2;i<=n;i++)
{
for(j=0;j<=n-i;j++)
{
wt[j][j+i]=b[j+i]+a[j+i]+wt[j][j+i-1];
c[j][j+i]=9999;
for(l=j+1;l<=j+i;l++)
{
if(c[j][j+i]>(c[j][l-1]+c[l][j+i]))
{
c[j][j+i]=c[j][l-1]+c[l][j+i];
r[j][j+i]=l;
}
}
c[j][j+i]+=wt[j][j+i];
}
cout<<endl;
}
cout<<"\n\nOptimal BST is :: ";
cout<<"\nw[0]["<<n<<"] :: "<<wt[0][n];
cout<<"\nc[0]["<<n<<"] :: "<<c[0][n];
cout<<"\nr[0]["<<n<<"] :: "<<r[0][n];
}
void print(int l1,int r1)
{
if(l1>=r1)
return;
if(r[l1][r[l1][r1]-1]!=0)
cout<<"\n Left child of "<<r[l1][r1]<<" :: "<<r[l1][r[l1][r1]-1];
if(r[r[l1][r1]][r1]!=0)
cout<<"\n Right child of "<<r[l1][r1]<<" :: "<<r[r[l1][r1]][r1];
print(l1,r[l1][r1]-1);
print(r[l1][r1],r1);
return;
}





Problem Statement:
Given sequence k = k1 < … < kn of n sorted keys, with a search probability pi for each key ki.
Build the Binary search tree that has the least search cost given the access probability for each
key
Objectives:
1. To understand concept of OBST.
2. To understand concept & features like extended binary search tree.
Software Requirements g++ / gcc compiler- / 64 bit Fedora, eclipse IDE
Input : 1.No.of Element. 2. key values 3. Key Probability
Output Create binary search tree having optimal searching cost
Theory:
 An optimal binary search tree is a binary search tree for which the nodes are arranged on levels
such that the tree cost is minimum. For the purpose of a better presentation of optimal binary search
trees, we will consider “extended binary search trees”, which have the keys stored at their internal
nodes. Suppose “n” keys k1, k2, … k n are stored at the internal nodes of a binary search tree. It is
assumed that the keys are given in sorted order, so that k1< k2 < … < kn.
 An extended binary search tree is obtained from the binary search tree by adding successor
nodes to each of its terminal nodes as indicated in the following figure by squares:
In the extended tree:
The squares represent terminal nodes. These terminal nodes represent unsuccessful searches of
the tree for key values. The searches did not end successfully, that is, because they represent key
values that are not actually stored in the tree;
The round nodes represent internal nodes; these are the actual keys stored in the tree;
Assuming that the relative frequency with which each key value is accessed is known, weights
can be assigned to each node of the extended tree (p1 … p6). They represent the relative
frequencies of searches terminating at each node, that is, they mark the successful searches.
If the user searches a particular key in the tree, 2 cases can occur:
1 – the key is found, so the corresponding weight „p‟ is incremented;
2 – the key is not found, so the corresponding „q‟ value is incremented.
GENERALIZATION:
The terminal node in the extended tree that is the left successor of k1 can be interpreted as
representing all key values that are not stored and are less than k1. Similarly, the terminal node in the
extended tree that is the right successor of kn, represents all key values not stored in the tree that are
greater than kn. The terminal node that is successes between ki and ki-1 in an inorder traversal
represent all key values not stored that lie between ki and ki - 1.
ALGORITHMS
We have the following procedure for determining R(i, j) and C(i, j) with 0 <= i <= j <= n:
PROCEDURE COMPUTE_ROOT(n, p, q; R, C)
begin
for i = 0 to n do
C (i, i) ←0
W (i, i) ←q(i)
for m = 0 to n do
for i = 0 to (n – m) do
j ←i + m
W (i, j) ←W (i, j – 1) + p (j) + q (j)
*find C (i, j) and R (i, j) which minimize the
tree cost
end
The following function builds an optimal binary search tree
FUNCTION CONSTRUCT(R, i, j)
begin
*build a new internal node N labeled (i, j)
k ←R (i, j)
f i = k then
*build a new leaf node N‟ labeled (i, i)
else
*N‟ ←CONSTRUCT(R, i, k)
*N‟ is the left child of node N
if k = (j – 1) then
*build a new leaf node N‟‟ labeled (j, j)
else
*N‟‟ ←CONSTRUCT(R, k + 1, j)
*N‟‟ is the right child of node N
return N
end
COMPLEXITY ANALYSIS:
The algorithm requires O (n2) time and O (n2) storage. Therefore, as „n‟ increases it will run out
of storage even before it runs out of time. The storage needed can be reduced by almost half by
implementing the two-dimensional arrays as one-dimensional array
Conclusion: This program gives us the knowledge OBST, Extended binary search tree.